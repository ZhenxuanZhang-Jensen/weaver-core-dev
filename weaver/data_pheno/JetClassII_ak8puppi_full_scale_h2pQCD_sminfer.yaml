selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (jet_pt > 200) & (jet_pt < 2500) & (jet_sdmass > 20) & (jet_sdmass < 500)

test_time_selection:
   (jet_sdmass > 110)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_mask: ak.ones_like(part_energy)

   ## first calculating scaled vectors
   part_px_scale: part_px / jet_pt * 500
   part_py_scale: part_py / jet_pt * 500
   part_pz_scale: part_pz / jet_pt * 500
   part_energy_scale: part_energy / jet_pt * 500

   part_pt: np.hypot(part_px, part_py)
   part_pt_scale: np.hypot(part_px_scale, part_py_scale)
   part_pt_scale_log: np.log(part_pt_scale)
   part_e_scale_log: np.log(part_energy_scale)
   part_logptrel: np.log(part_pt/jet_pt)
   part_logerel: np.log(part_energy/jet_energy)
   part_deltaR: np.hypot(part_deta, part_dphi)
   part_d0: np.tanh(part_d0val)
   part_dz: np.tanh(part_dzval)
   part_isElectron: (part_pid == 11) | (part_pid == -11)
   part_isMuon: (part_pid == 13) | (part_pid == -13)
   part_isPhoton: (part_pid == 22)
   part_isChargedHadron: (part_charge != 0) & (~part_isElectron) & (~part_isMuon)
   part_isNeutralHadron: (part_charge == 0) & (~part_isPhoton)

   # the corrected label
   jet_label_corr: ak.where(jet_label < 15, jet_label, jet_label - 149)

   # classes for reweighting
   label_H_QQ: ((jet_label >= 0) & (jet_label < 9))
   label_H_gg: (jet_label == 9)
   label_H_ll: ((jet_label >= 10) & (jet_label < 12))
   label_H_tauhtaul: ((jet_label >= 12) & (jet_label < 14))
   label_H_tauhtauh: (jet_label == 14)

   label_QCD: ((jet_label >= 164) & (jet_label < 191))


preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_deta, null]
         - [part_dphi, null]
   pf_features:
      length: 128
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [part_pt_scale_log, 1.7, 0.7]
         - [part_e_scale_log, 2.0, 0.7]
         - [part_logptrel, -4.7, 0.7]
         - [part_logerel, -4.7, 0.7]
         - [part_deltaR, 0.2, 4.0]
         - [part_charge, null]
         - [part_isChargedHadron, null]
         - [part_isNeutralHadron, null]
         - [part_isPhoton, null]
         - [part_isElectron, null]
         - [part_isMuon, null]
         - [part_d0, null]
         - [part_d0err, 0, 1, 0, 1]
         - [part_dz, null]
         - [part_dzerr, 0, 1, 0, 1]
         - [part_deta, null]
         - [part_dphi, null]
   pf_vectors:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px_scale, null]
         - [part_py_scale, null]
         - [part_pz_scale, null]
         - [part_energy_scale, null]
   pf_mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null]

labels:
    ### type can be `simple`, `custom`, 'hybrid'
    type: simple
    value: null
    value_cls_index: jet_label_corr  # just input the label index
    value_cls_names: [label_H_bb, label_H_cc, label_H_ss, label_H_qq, label_H_bc, label_H_cs, label_H_bq, label_H_cq, label_H_sq, label_H_gg, label_H_ee, label_H_mm, label_H_tauhtaue, label_H_tauhtaum, label_H_tauhtauh, label_QCD_bbccss, label_QCD_bbccs, label_QCD_bbcc, label_QCD_bbcss, label_QCD_bbcs, label_QCD_bbc, label_QCD_bbss, label_QCD_bbs, label_QCD_bb, label_QCD_bccss, label_QCD_bccs, label_QCD_bcc, label_QCD_bcss, label_QCD_bcs, label_QCD_bc, label_QCD_bss, label_QCD_bs, label_QCD_b, label_QCD_ccss, label_QCD_ccs, label_QCD_cc, label_QCD_css, label_QCD_cs, label_QCD_c, label_QCD_ss, label_QCD_s, label_QCD_light]


observers:
   - event_no
   - event_class
   - jet_pt
   - jet_eta
   - jet_phi
   - jet_energy
   - jet_sdmass

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      jet_pt: [200, 240, 287, 344, 412, 493, 590, 707, 847, 1014, 1215, 1455, 1743, 2087, 2500]
      jet_sdmass: [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500]
   reweight_classes:
      [
         label_H_QQ, label_H_gg, label_H_ll, label_H_tauhtaul, label_H_tauhtauh,
         label_QCD, 
      ]
   class_weights:
      [
         0.4, 0.05, 0.08, 0.01, 0.015,
         0.25,
      ]
   reweight_hists:

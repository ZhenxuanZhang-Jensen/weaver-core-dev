### use `&`, `|`, `~` for logical operations on numpy arrays
### can use functions from `math`, `np` (numpy), and `ak` in the expression

selection: >-
    (jet_sdmass >= 170) & (jet_sdmass < 210) & ((event_class <= 18) | ((event_class == 19) & (event_no % 100 < (10000 / 100))) )
    & ((event_class <= 18) | ((event_class > 18) & (event_no % 2 == 0)))

### selection to apply at test time (i.e., when running w/ --predict)
test_time_selection: >-
    (jet_sdmass >= 120)

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `ak` in the expression
    # training categories
    label_sr: (jet_sdmass >= 170) & (jet_sdmass < 210) & (event_no % 2 == 0)
    label_sb: (jet_sdmass >= 170) & (jet_sdmass < 210) & (event_no % 2 == 1) & (event_class <= 18)
    label_index: np.argmax(np.stack([label_sr, label_sb], -1), -1)
    # training vars
    jet_tau1_log: np.log(np.maximum(jet_tau1, 1e-10))
    jet_tau2_log: np.log(np.maximum(jet_tau2, 1e-10))
    jet_tau3_log: np.log(np.maximum(jet_tau3, 1e-10))
    jet_tau4_log: np.log(np.maximum(jet_tau4, 1e-10))

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    ft_vars:
        length: null
        vars:
            - [jet_nparticles, 0.05, 3]
            - [jet_tau1_log, 1, -1.0]
            - [jet_tau2_log, 1, -2.5]
            - [jet_tau3_log, 1, -3.0]
            - [jet_tau4_log, 1, -3.0]
    label_vars:
        length: null
        vars:
            - [label_index, null]

labels:
    ### type can be `simple`, `custom`, 'hybrid'
    type: simple
    value: [label_sr, label_sb]


observers:
    - event_no
    - event_class
    - jet_sdmass

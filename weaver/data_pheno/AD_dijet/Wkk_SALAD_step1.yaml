### use `&`, `|`, `~` for logical operations on numpy arrays
### can use functions from `math`, `np` (numpy), and `ak` in the expression

selection: >-
    (((dijet_mass >= 2200) & (dijet_mass < 2500)) | ((dijet_mass >= 3100) & (dijet_mass < 3400)))
    & (
      (file_no == 0) | (file_no == 1) | ((file_no == 2) & (event_class == 0))
    )

test_time_selection: >-
    (dijet_mass >= 2200) & (dijet_mass < 3400)

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `ak` in the expression
    # training categories
    label_data: (file_no == 0) | (file_no == 1)
    label_bkg: (file_no == 2)
    label_index: np.argmax(np.stack([label_data, label_bkg], -1), -1)

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    ft_vars:
        length: 128
        pad_mode: constant
        vars:
            - [jet_1_hidneurons, null]
            - [jet_2_hidneurons, null]
    label_vars:
        length: null
        vars:
            - [label_index, null]

labels:
    ### type can be `simple`, `custom`, 'hybrid'
    type: simple
    value: [label_data, label_bkg]


observers:
    - event_no
    - event_class
    - dijet_mass

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      label_data: [-100000, 100000] # dummy
      label_bkg: [-100000, 100000] # dummy
   reweight_classes: [label_data, label_bkg]
   reweight_threshold: 0
   class_weights: [1, 1]
   reweight_hists:
